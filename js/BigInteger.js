/**
     * An arbitrary-precision integer.
     */
var BigInteger = 























//"T",TA);
//"Ta",TA);

/**
     * Initializes a BigInteger object set to zero.
     */
function() {

};
(function(constructor, prototype){
    constructor.CountWords = function(X, N) {
        while (N != 0 && X[N - 1] == 0) N--;
        return (N|0);
    };
    constructor.SetWords = function(r, rstart, a, n) {
        for (var i = 0; i < n; i++) r[rstart + i] = (((a) & 65535)|0);
    };
    constructor.ShiftWordsLeftByBits = function(r, rstart, n, shiftBits) {
        {
            var u, carry = 0;
            if (shiftBits != 0) {
                for (var i = 0; i < n; i++) {
                    u = r[rstart + i];
                    r[rstart + i] = ((((((((((u << (shiftBits|0))|0) | ((carry|0) & 65535)))|0)) & 65535))|0));
                    carry = ((((u|0) & 65535) >> ((16 - shiftBits)|0))|0);
                }
            }
            return carry;
        }
    };
    constructor.ShiftWordsRightByBits = function(r, rstart, n, shiftBits) {
        var u, carry = 0;
        {
            if (shiftBits != 0) for (var i = n; i > 0; i--) {
                u = r[rstart + i - 1];
                r[rstart + i - 1] = ((((((((((((u|0) & 65535) >> (shiftBits|0)) & 65535) | ((carry|0) & 65535)))|0)) & 65535))|0));
                carry = ((((u|0) & 65535) << ((16 - shiftBits)|0))|0);
            }
            return carry;
        }
    };
    constructor.ShiftWordsRightByBitsSignExtend = function(r, rstart, n, shiftBits) {
        {
            var u, carry = ((65535 << ((16 - shiftBits)|0))|0);
            if (shiftBits != 0) for (var i = n; i > 0; i--) {
                u = r[rstart + i - 1];
                r[rstart + i - 1] = (((((((((((u|0) & 65535) >> (shiftBits|0)) | ((carry|0) & 65535)))|0)) & 65535))|0));
                carry = ((((u|0) & 65535) << ((16 - shiftBits)|0))|0);
            }
            return carry;
        }
    };
    constructor.ShiftWordsLeftByWords = function(r, rstart, n, shiftWords) {
        shiftWords = (shiftWords < n ? shiftWords : n);
        if (shiftWords != 0) {
            for (var i = n - 1; i >= shiftWords; i--) r[rstart + i] = (((r[rstart + i - shiftWords]) & 65535)|0);
            BigInteger.SetWords(r, rstart, 0, shiftWords);
        }
    };
    constructor.ShiftWordsRightByWords = function(r, rstart, n, shiftWords) {
        shiftWords = (shiftWords < n ? shiftWords : n);
        if (shiftWords != 0) {
            for (var i = 0; i + shiftWords < n; i++) r[rstart + i] = (((r[rstart + i + shiftWords]) & 65535)|0);
            BigInteger.SetWords(r, ((rstart + n - shiftWords)|0), 0, shiftWords);
        }
    };
    constructor.ShiftWordsRightByWordsSignExtend = function(r, rstart, n, shiftWords) {
        shiftWords = (shiftWords < n ? shiftWords : n);
        if (shiftWords != 0) {
            for (var i = 0; i + shiftWords < n; i++) r[rstart + i] = (((r[rstart + i + shiftWords]) & 65535)|0);
            BigInteger.SetWords(r, ((rstart + n - shiftWords)|0), (65535), shiftWords);
        }
    };
    constructor.Compare = function(A, astart, B, bstart, N) {
        while ((N--) != 0) {
            var an = (((A[astart + N])|0) & 65535);
            var bn = (((B[bstart + N])|0) & 65535);
            if (an > bn) return 1; else if (an < bn) return -1;
        }
        return 0;
    };
    constructor.Increment = function(A, Astart, N, B) {
        {
            var tmp = A[Astart];
            A[Astart] = (((((tmp + B)|0) & 65535)|0));
            if ((((A[Astart])|0) & 65535) >= ((tmp|0) & 65535)) return 0;
            for (var i = 1; i < N; i++) {
                A[Astart + i] = (((A[Astart + i] + 1) & 65535)|0);
                if (A[Astart + i] != 0) return 0;
            }
            return 1;
        }
    };
    constructor.Decrement = function(A, Astart, N, B) {
        {
            var tmp = A[Astart];
            A[Astart] = (((((tmp - B)|0) & 65535)|0));
            if ((((A[Astart])|0) & 65535) <= ((tmp|0) & 65535)) return 0;
            for (var i = 1; i < N; i++) {
                tmp = A[Astart + i];
                A[Astart + i] = (((A[Astart + i] - 1) & 65535)|0);
                if (tmp != 0) return 0;
            }
            return 1;
        }
    };
    constructor.TwosComplement = function(A, Astart, N) {
        BigInteger.Decrement(A, Astart, N, 1);
        for (var i = 0; i < N; i++) A[Astart + i] = (((((~A[Astart + i])|0) & 65535)|0));
    };
    constructor.Add = function(C, cstart, A, astart, B, bstart, N) {
        {
            var u;
            u = 0;
            for (var i = 0; i < N; i += 2) {
                u = (((A[astart + i])|0) & 65535) + (((B[bstart + i])|0) & 65535) + ((u >> 16)|0);
                C[cstart + i] = (((((((u|0) & 65535)|0) & 65535))|0));
                u = (((A[astart + i + 1])|0) & 65535) + (((B[bstart + i + 1])|0) & 65535) + ((u >> 16)|0);
                C[cstart + i + 1] = (((((((u|0) & 65535)|0) & 65535))|0));
            }
            return ((u|0) >>> 16);
        }
    };
    constructor.Subtract = function(C, cstart, A, astart, B, bstart, N) {
        {
            var u;
            u = 0;
            for (var i = 0; i < N; i += 2) {
                u = (((A[astart + i])|0) & 65535) - (((B[bstart + i])|0) & 65535) - (((u >> 31) & 1)|0);
                C[cstart + i] = (((((((u|0) & 65535)|0) & 65535))|0));
                u = (((A[astart + i + 1])|0) & 65535) - (((B[bstart + i + 1])|0) & 65535) - (((u >> 31) & 1)|0);
                C[cstart + i + 1] = (((((((u|0) & 65535)|0) & 65535))|0));
            }
            return (((u >> 31) & 1)|0);
        }
    };
    constructor.LinearMultiply = function(productArr, cstart, A, astart, B, N) {
        {
            var carry = 0;
            var Bint = ((B|0) & 65535);
            for (var i = 0; i < N; i++) {
                var p;
                p = (((A[astart + i])|0) & 65535) * Bint;
                p = p + ((carry|0) & 65535);
                productArr[cstart + i] = (((((((p|0) & 65535)|0) & 65535))|0));
                carry = ((p >> 16)|0);
            }
            return carry;
        }
    };
    constructor.Baseline_Square2 = function(R, rstart, A, astart) {
        {
            var p;
            var c;
            var d;
            var e;
            p = (((A[astart])|0) & 65535) * (((A[astart])|0) & 65535);
            R[rstart] = (((((((p|0) & 65535)|0) & 65535))|0));
            e = ((p|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2 * 2 - 3] = (((c) & 65535)|0);
            p = (((A[astart + 2 - 1])|0) & 65535) * (((A[astart + 2 - 1])|0) & 65535);
            p += e;
            R[rstart + 2 * 2 - 2] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 2 * 2 - 1] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Square4 = function(R, rstart, A, astart) {
        {
            var p;
            var c;
            var d;
            var e;
            p = (((A[astart])|0) & 65535) * (((A[astart])|0) & 65535);
            R[rstart] = (((((((p|0) & 65535)|0) & 65535))|0));
            e = ((p|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2 * 4 - 3] = (((c) & 65535)|0);
            p = (((A[astart + 4 - 1])|0) & 65535) * (((A[astart + 4 - 1])|0) & 65535);
            p += e;
            R[rstart + 2 * 4 - 2] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 2 * 4 - 1] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Square8 = function(R, rstart, A, astart) {
        {
            var p;
            var c;
            var d;
            var e;
            p = (((A[astart])|0) & 65535) * (((A[astart])|0) & 65535);
            R[rstart] = (((((((p|0) & 65535)|0) & 65535))|0));
            e = ((p|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 5] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 6] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 7] = (((c) & 65535)|0);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 8] = (((c) & 65535)|0);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 9] = (((c) & 65535)|0);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 10] = (((c) & 65535)|0);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 11] = (((c) & 65535)|0);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 12] = (((c) & 65535)|0);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2 * 8 - 3] = (((c) & 65535)|0);
            p = (((A[astart + 8 - 1])|0) & 65535) * (((A[astart + 8 - 1])|0) & 65535);
            p += e;
            R[rstart + 2 * 8 - 2] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 2 * 8 - 1] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Square16 = function(R, rstart, A, astart) {
        {
            var p;
            var c;
            var d;
            var e;
            p = (((A[astart])|0) & 65535) * (((A[astart])|0) & 65535);
            R[rstart] = (((((((p|0) & 65535)|0) & 65535))|0));
            e = ((p|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 5] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 6] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 7] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 8] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 9] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 10] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 11] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 12] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 13] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 14] = (((c) & 65535)|0);
            p = (((A[astart])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 15] = (((c) & 65535)|0);
            p = (((A[astart + 1])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 16] = (((c) & 65535)|0);
            p = (((A[astart + 2])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 17] = (((c) & 65535)|0);
            p = (((A[astart + 3])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 18] = (((c) & 65535)|0);
            p = (((A[astart + 4])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 19] = (((c) & 65535)|0);
            p = (((A[astart + 5])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 20] = (((c) & 65535)|0);
            p = (((A[astart + 6])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 21] = (((c) & 65535)|0);
            p = (((A[astart + 7])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 11])|0) & 65535) * (((A[astart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 22] = (((c) & 65535)|0);
            p = (((A[astart + 8])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 23] = (((c) & 65535)|0);
            p = (((A[astart + 9])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 12])|0) & 65535) * (((A[astart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 24] = (((c) & 65535)|0);
            p = (((A[astart + 10])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 25] = (((c) & 65535)|0);
            p = (((A[astart + 11])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 13])|0) & 65535) * (((A[astart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 26] = (((c) & 65535)|0);
            p = (((A[astart + 12])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 27] = (((c) & 65535)|0);
            p = (((A[astart + 13])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            p = (((A[astart + 14])|0) & 65535) * (((A[astart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 28] = (((c) & 65535)|0);
            p = (((A[astart + 14])|0) & 65535) * (((A[astart + 15])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            d = ((((d << 1) + (((c|0) >> 15) & 1)))|0);
            c <<= 1;
            e = e + ((c|0) & 65535);
            c = (((e|0) & 65535)|0);
            e = d + ((e|0) >>> 16);
            R[rstart + 2 * 16 - 3] = (((c) & 65535)|0);
            p = (((A[astart + 16 - 1])|0) & 65535) * (((A[astart + 16 - 1])|0) & 65535);
            p += e;
            R[rstart + 2 * 16 - 2] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 2 * 16 - 1] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Multiply2 = function(R, rstart, A, astart, B, bstart) {
        {
            var p;
            var c;
            var d;
            p = (((A[astart])|0) & 65535) * (((B[bstart])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            R[rstart] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p += d;
            R[rstart + 1 + 1] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 1 + 2] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Multiply4 = function(R, rstart, A, astart, B, bstart) {
        {
            var p;
            var c;
            var d;
            p = (((A[astart])|0) & 65535) * (((B[bstart])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            R[rstart] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 5] = (((c) & 65535)|0);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p += d;
            R[rstart + 5 + 1] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 5 + 2] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Multiply8 = function(R, rstart, A, astart, B, bstart) {
        {
            var p;
            var c;
            var d;
            p = (((A[astart])|0) & 65535) * (((B[bstart])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            R[rstart] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 5] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 6] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 7] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 8] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 9] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 10] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 11] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 12] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 13] = (((c) & 65535)|0);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p += d;
            R[rstart + 13 + 1] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 13 + 2] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.Baseline_Multiply16 = function(R, rstart, A, astart, B, bstart) {
        {
            var p;
            var c;
            var d;
            p = (((A[astart])|0) & 65535) * (((B[bstart])|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = ((p|0) >>> 16);
            R[rstart] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 1] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 2] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 3] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 4] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 5] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 6] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 7] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 8] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 9] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 10] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 11] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 12] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 13] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 14] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 15] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 1])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 1])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 16] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 2])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 2])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 17] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 3])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 3])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 18] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 4])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 4])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 19] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 5])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 5])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 20] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 6])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 6])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 21] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 7])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 7])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 22] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 8])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 8])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 23] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 9])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 9])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 24] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 10])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 10])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 25] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 11])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 11])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 26] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 12])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 12])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 27] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 13])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 13])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 28] = (((c) & 65535)|0);
            c = (((d|0) & 65535)|0);
            d = ((d|0) >>> 16);
            p = (((A[astart + 14])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 14])|0) & 65535);
            p = p + ((c|0) & 65535);
            c = (((p|0) & 65535)|0);
            d = d + ((p|0) >>> 16);
            R[rstart + 29] = (((c) & 65535)|0);
            p = (((A[astart + 15])|0) & 65535) * (((B[bstart + 15])|0) & 65535);
            p += d;
            R[rstart + 30] = (((((((p|0) & 65535)|0) & 65535))|0));
            R[rstart + 31] = (((((p >> 16)|0) & 65535)|0));
        }
    };
    constructor.s_recursionLimit = 16;
    constructor.RecursiveMultiply = function(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, Barr, Bstart, N) {
        if (N <= BigInteger.s_recursionLimit) {
            N >>= 2;
            switch(N) {
                case 0:
                    BigInteger.Baseline_Multiply2(Rarr, Rstart, Aarr, Astart, Barr, Bstart);
                    break;
                case 1:
                    BigInteger.Baseline_Multiply4(Rarr, Rstart, Aarr, Astart, Barr, Bstart);
                    break;
                case 2:
                    BigInteger.Baseline_Multiply8(Rarr, Rstart, Aarr, Astart, Barr, Bstart);
                    break;
                case 4:
                    BigInteger.Baseline_Multiply16(Rarr, Rstart, Aarr, Astart, Barr, Bstart);
                    break;
                default:
                    throw new RuntimeException();
            }
        } else {
            var N2 = ((N / 2)|0);
            var AN2 = BigInteger.Compare(Aarr, Astart, Aarr, ((Astart + N2)|0), N2) > 0 ? 0 : N2;
            BigInteger.Subtract(Rarr, Rstart, Aarr, ((Astart + AN2)|0), Aarr, ((Astart + (N2 ^ AN2))|0), N2);
            var BN2 = BigInteger.Compare(Barr, Bstart, Barr, ((Bstart + N2)|0), N2) > 0 ? 0 : N2;
            BigInteger.Subtract(Rarr, ((Rstart + N2)|0), Barr, ((Bstart + BN2)|0), Barr, ((Bstart + (N2 ^ BN2))|0), N2);
            BigInteger.RecursiveMultiply(Rarr, ((Rstart + N)|0), Tarr, ((Tstart + N)|0), Aarr, ((Astart + N2)|0), Barr, ((Bstart + N2)|0), N2);
            BigInteger.RecursiveMultiply(Tarr, Tstart, Tarr, ((Tstart + N)|0), Rarr, Rstart, Rarr, ((Rstart + N2)|0), N2);
            BigInteger.RecursiveMultiply(Rarr, Rstart, Tarr, ((Tstart + N)|0), Aarr, Astart, Barr, Bstart, N2);
            var c2 = BigInteger.Add(Rarr, ((Rstart + N)|0), Rarr, ((Rstart + N)|0), Rarr, ((Rstart + N2)|0), N2);
            var c3 = c2;
            c2 += BigInteger.Add(Rarr, ((Rstart + N2)|0), Rarr, ((Rstart + N)|0), Rarr, (Rstart), N2);
            c3 += BigInteger.Add(Rarr, ((Rstart + N)|0), Rarr, ((Rstart + N)|0), Rarr, ((Rstart + N + N2)|0), N2);
            if (AN2 == BN2) c3 -= BigInteger.Subtract(Rarr, ((Rstart + N2)|0), Rarr, ((Rstart + N2)|0), Tarr, Tstart, N); else c3 += BigInteger.Add(Rarr, ((Rstart + N2)|0), Rarr, ((Rstart + N2)|0), Tarr, Tstart, N);
            c3 += BigInteger.Increment(Rarr, ((Rstart + N)|0), N2, (c2|0));
            BigInteger.Increment(Rarr, ((Rstart + N + N2)|0), N2, (c3|0));
        }
    };
    constructor.RecursiveSquare = function(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, N) {
        if (N <= BigInteger.s_recursionLimit) {
            N >>= 2;
            switch(N) {
                case 0:
                    BigInteger.Baseline_Square2(Rarr, Rstart, Aarr, Astart);
                    break;
                case 1:
                    BigInteger.Baseline_Square4(Rarr, Rstart, Aarr, Astart);
                    break;
                case 2:
                    BigInteger.Baseline_Square8(Rarr, Rstart, Aarr, Astart);
                    break;
                case 4:
                    BigInteger.Baseline_Square16(Rarr, Rstart, Aarr, Astart);
                    break;
                default:
                    throw new RuntimeException();
            }
        } else {
            var N2 = ((N / 2)|0);
            BigInteger.RecursiveSquare(Rarr, Rstart, Tarr, ((Tstart + N)|0), Aarr, Astart, N2);
            BigInteger.RecursiveSquare(Rarr, ((Rstart + N)|0), Tarr, ((Tstart + N)|0), Aarr, ((Astart + N2)|0), N2);
            BigInteger.RecursiveMultiply(Tarr, Tstart, Tarr, ((Tstart + N)|0), Aarr, Astart, Aarr, ((Astart + N2)|0), N2);
            var carry = BigInteger.Add(Rarr, ((Rstart + N2)|0), Rarr, ((Rstart + N2)|0), Tarr, Tstart, N);
            carry += BigInteger.Add(Rarr, ((Rstart + N2)|0), Rarr, ((Rstart + N2)|0), Tarr, Tstart, N);
            BigInteger.Increment(Rarr, ((Rstart + N + N2)|0), N2, (carry|0));
        }
    };
    constructor.Multiply = function(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, Barr, Bstart, N) {
        BigInteger.RecursiveMultiply(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, Barr, Bstart, N);
    };
    constructor.Square = function(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, N) {
        BigInteger.RecursiveSquare(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, N);
    };
    constructor.AsymmetricMultiply = function(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, NA, Barr, Bstart, NB) {
        if (NA == NB) {
            if (Astart == Bstart && Aarr == Barr) {
                BigInteger.Square(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, NA);
            } else if (NA == 2) BigInteger.Baseline_Multiply2(Rarr, Rstart, Aarr, Astart, Barr, Bstart); else BigInteger.Multiply(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, Barr, Bstart, NA);
            return;
        }
        if (NA > NB) {
            var tmp1 = Aarr;
            Aarr = Barr;
            Barr = tmp1;
            var tmp3 = Astart;
            Astart = Bstart;
            Bstart = tmp3;
            var tmp2 = NA;
            NA = NB;
            NB = tmp2;
        }
        if (NA == 2 && Aarr[Astart + 1] == 0) {
            switch(Aarr[Astart]) {
                case 0:
                    BigInteger.SetWords(Rarr, Rstart, 0, NB + 2);
                    return;
                case 1:
                    for (var arrfillI = 0; arrfillI < (NB|0); arrfillI++) Rarr[Rstart + arrfillI] = Barr[Bstart + arrfillI];
                    Rarr[Rstart + NB] = (((0) & 65535)|0);
                    Rarr[Rstart + NB + 1] = (((0) & 65535)|0);
                    return;
                default:
                    Rarr[Rstart + NB] = ((((BigInteger.LinearMultiply(Rarr, Rstart, Barr, Bstart, Aarr[Astart], NB)) & 65535)|0));
                    Rarr[Rstart + NB + 1] = (((0) & 65535)|0);
                    return;
            }
        }
        if (NA == 2) {
            var i;
            if (((NB / 2)|0) % 2 == 0) {
                BigInteger.Baseline_Multiply2(Rarr, Rstart, Aarr, Astart, Barr, Bstart);
                for (var arrfillI = 0; arrfillI < 2; arrfillI++) Tarr[((Tstart + 2 * 2)|0) + arrfillI] = Rarr[((Rstart + 2)|0) + arrfillI];
                for (i = 2 * 2; i < NB; i += 2 * 2) BigInteger.Baseline_Multiply2(Tarr, ((Tstart + 2 + i)|0), Aarr, Astart, Barr, ((Bstart + i)|0));
                for (i = 2; i < NB; i += 2 * 2) BigInteger.Baseline_Multiply2(Rarr, ((Rstart + i)|0), Aarr, Astart, Barr, ((Bstart + i)|0));
            } else {
                for (i = 0; i < NB; i += 2 * 2) BigInteger.Baseline_Multiply2(Rarr, ((Rstart + i)|0), Aarr, Astart, Barr, ((Bstart + i)|0));
                for (i = 2; i < NB; i += 2 * 2) BigInteger.Baseline_Multiply2(Tarr, ((Tstart + 2 + i)|0), Aarr, Astart, Barr, ((Bstart + i)|0));
            }
        } else {
            var i;
            if (((NB / NA)|0) % 2 == 0) {
                BigInteger.Multiply(Rarr, Rstart, Tarr, Tstart, Aarr, Astart, Barr, Bstart, NA);
                for (var arrfillI = 0; arrfillI < (NA|0); arrfillI++) Tarr[((Tstart + 2 * NA)|0) + arrfillI] = Rarr[((Rstart + NA)|0) + arrfillI];
                for (i = 2 * NA; i < NB; i += 2 * NA) BigInteger.Multiply(Tarr, ((Tstart + NA + i)|0), Tarr, Tstart, Aarr, Astart, Barr, ((Bstart + i)|0), NA);
                for (i = NA; i < NB; i += 2 * NA) BigInteger.Multiply(Rarr, ((Rstart + i)|0), Tarr, Tstart, Aarr, Astart, Barr, ((Bstart + i)|0), NA);
            } else {
                for (i = 0; i < NB; i += 2 * NA) BigInteger.Multiply(Rarr, ((Rstart + i)|0), Tarr, Tstart, Aarr, Astart, Barr, ((Bstart + i)|0), NA);
                for (i = NA; i < NB; i += 2 * NA) BigInteger.Multiply(Tarr, ((Tstart + NA + i)|0), Tarr, Tstart, Aarr, Astart, Barr, ((Bstart + i)|0), NA);
            }
        }
        if (BigInteger.Add(Rarr, ((Rstart + NA)|0), Rarr, ((Rstart + NA)|0), Tarr, ((Tstart + 2 * NA)|0), NB - NA) != 0) BigInteger.Increment(Rarr, ((Rstart + NB)|0), NA, 1);
    };
    constructor.MakeUint = function(first, second) {
        return (((((first|0) & 65535) | ((second|0) << 16))|0));
    };
    constructor.GetLowHalf = function(val) {
        return ((val & 65535)|0);
    };
    constructor.GetHighHalf = function(val) {
        return ((val >>> 16)|0);
    };
    constructor.GetHighHalfAsBorrow = function(val) {
        return ((0 - (val >>> 16))|0);
    };
    constructor.BitPrecision = function(numberValue) {
        if (numberValue == 0) return 0;
        var ivalue = ((numberValue|0) & 65535);
        var l = 0, h = 16;
        while (h - l > 1) {
            var middle = (((l + h) / 2)|0);
            if ((ivalue >> (middle|0)) != 0) l = middle; else h = middle;
        }
        return h;
    };
    constructor.BitPrecisionInt = function(numberValue) {
        if (numberValue == 0) return 0;
        var l = 0, h = 32;
        while (h - l > 1) {
            var middle = (((l + h) / 2)|0);
            if ((numberValue >> (middle|0)) != 0) l = middle; else h = middle;
        }
        return h;
    };
    constructor.Divide32By16 = function(dividendLow, divisorShort, returnRemainder) {
        var tmpInt;
        var dividendHigh = 0;
        var intDivisor = ((divisorShort|0) & 65535);
        for (var i = 0; i < 32; i++) {
            tmpInt = dividendHigh >> 31;
            dividendHigh <<= 1;
            dividendHigh = ((((dividendHigh | (((dividendLow >> 31) & 1)|0)))|0));
            dividendLow <<= 1;
            tmpInt |= dividendHigh;
            if (((tmpInt >> 31) != 0) || (tmpInt >= intDivisor)) {
                {
                    dividendHigh -= intDivisor;
                    dividendLow += 1;
                }
            }
        }
        return (returnRemainder ? (((dividendHigh|0) & 65535)|0) : (((dividendLow|0) & 65535)|0));
    };
    constructor.DivideUnsigned = function(x, y) {
        {
            var iy = ((y|0) & 65535);
            if ((x >> 31) == 0) {
                return ((((((x|0) / iy)|0) & 65535))|0);
            } else {
                return BigInteger.Divide32By16(x, y, false);
            }
        }
    };
    constructor.RemainderUnsigned = function(x, y) {
        {
            var iy = ((y|0) & 65535);
            if ((x >> 31) == 0) {
                return ((((x|0) % iy) & 65535)|0);
            } else {
                return BigInteger.Divide32By16(x, y, true);
            }
        }
    };
    constructor.DivideThreeWordsByTwo = function(A, Astart, B0, B1) {
        var Q;
        {
            if (((B1 + 1)|0) == 0) Q = A[Astart + 2]; else if (((B1|0) & 65535) > 0) Q = BigInteger.DivideUnsigned(BigInteger.MakeUint(A[Astart + 1], A[Astart + 2]), ((((B1|0) + 1) & 65535)|0)); else Q = BigInteger.DivideUnsigned(BigInteger.MakeUint(A[Astart], A[Astart + 1]), B0);
            var Qint = ((Q|0) & 65535);
            var B0int = ((B0|0) & 65535);
            var B1int = ((B1|0) & 65535);
            var p = B0int * Qint;
            var u = (((A[Astart])|0) & 65535) - (((BigInteger.GetLowHalf(p))|0) & 65535);
            A[Astart] = ((((BigInteger.GetLowHalf(u)) & 65535)|0));
            u = (((A[Astart + 1])|0) & 65535) - (((BigInteger.GetHighHalf(p))|0) & 65535) - (((BigInteger.GetHighHalfAsBorrow(u))|0) & 65535) - (B1int * Qint);
            A[Astart + 1] = ((((BigInteger.GetLowHalf(u)) & 65535)|0));
            A[Astart + 2] = ((((A[Astart + 2] + BigInteger.GetHighHalf(u)) & 65535)|0));
            while (A[Astart + 2] != 0 || (((A[Astart + 1])|0) & 65535) > ((B1|0) & 65535) || (A[Astart + 1] == B1 && (((A[Astart])|0) & 65535) >= ((B0|0) & 65535))) {
                u = (((A[Astart])|0) & 65535) - B0int;
                A[Astart] = ((((BigInteger.GetLowHalf(u)) & 65535)|0));
                u = (((A[Astart + 1])|0) & 65535) - B1int - (((BigInteger.GetHighHalfAsBorrow(u))|0) & 65535);
                A[Astart + 1] = ((((BigInteger.GetLowHalf(u)) & 65535)|0));
                A[Astart + 2] = ((((A[Astart + 2] + BigInteger.GetHighHalf(u)) & 65535)|0));
                Q++;
            }
        }
        return Q;
    };
    constructor.DivideFourWordsByTwo = function(T, Al, Ah, B) {
        if (B == 0) return BigInteger.MakeUint(BigInteger.GetLowHalf(Al), BigInteger.GetHighHalf(Ah)); else {
            var Q = [0, 0];
            T[0] = ((((BigInteger.GetLowHalf(Al)) & 65535)|0));
            T[1] = ((((BigInteger.GetHighHalf(Al)) & 65535)|0));
            T[2] = ((((BigInteger.GetLowHalf(Ah)) & 65535)|0));
            T[3] = ((((BigInteger.GetHighHalf(Ah)) & 65535)|0));
            Q[1] = (((((BigInteger.DivideThreeWordsByTwo(T, 1, BigInteger.GetLowHalf(B), BigInteger.GetHighHalf(B))) & 65535))|0));
            Q[0] = (((((BigInteger.DivideThreeWordsByTwo(T, 0, BigInteger.GetLowHalf(B), BigInteger.GetHighHalf(B))) & 65535))|0));
            return BigInteger.MakeUint(Q[0], Q[1]);
        }
    };
    constructor.AtomicDivide = function(Q, Qstart, A, Astart, B, Bstart) {
        var T = [0, 0, 0, 0];
        var q = BigInteger.DivideFourWordsByTwo(T, BigInteger.MakeUint(A[Astart], A[Astart + 1]), BigInteger.MakeUint(A[Astart + 2], A[Astart + 3]), BigInteger.MakeUint(B[Bstart], B[Bstart + 1]));
        Q[Qstart] = ((((BigInteger.GetLowHalf(q)) & 65535)|0));
        Q[Qstart + 1] = ((((BigInteger.GetHighHalf(q)) & 65535)|0));
    };
    constructor.CorrectQuotientEstimate = function(Rarr, Rstart, Tarr, Tstart, Qarr, Qstart, Barr, Bstart, N) {
        {
            if (N == 2) BigInteger.Baseline_Multiply2(Tarr, Tstart, Qarr, Qstart, Barr, Bstart); else BigInteger.AsymmetricMultiply(Tarr, Tstart, Tarr, ((Tstart + (N + 2))|0), Qarr, Qstart, 2, Barr, Bstart, N);
            BigInteger.Subtract(Rarr, Rstart, Rarr, Rstart, Tarr, Tstart, N + 2);
            while (Rarr[Rstart + N] != 0 || BigInteger.Compare(Rarr, Rstart, Barr, Bstart, N) >= 0) {
                Rarr[Rstart + N] = (((((Rarr[Rstart + N] - ((BigInteger.Subtract(Rarr, Rstart, Rarr, Rstart, Barr, Bstart, N))|0)) & 65535))|0));
                Qarr[Qstart] = (((Qarr[Qstart] + 1) & 65535)|0);
                Qarr[Qstart + 1] = (((((Qarr[Qstart + 1] + (((Qarr[Qstart] == 0) ? 1 : 0)|0)) & 65535))|0));
            }
        }
    };
    constructor.Divide = function(Rarr, Rstart, Qarr, Qstart, TA, Tstart, Aarr, Astart, NAint, Barr, Bstart, NBint) {
        var NA = (NAint|0);
        var NB = (NBint|0);
        var TBarr = TA;
        var TParr = TA;
        var TBstart = ((Tstart + (NA + 2))|0);
        var TPstart = ((Tstart + (NA + 2 + NB))|0);
        {
            var shiftWords = ((Barr[Bstart + NB - 1] == 0 ? 1 : 0)|0);
            TBarr[TBstart] = (((0) & 65535)|0);
            TBarr[TBstart + NB - 1] = (((0) & 65535)|0);
            for (var arrfillI = 0; arrfillI < NB - shiftWords; arrfillI++) TBarr[((TBstart + shiftWords)|0) + arrfillI] = Barr[Bstart + arrfillI];
            var shiftBits = ((16 - BigInteger.BitPrecision(TBarr[TBstart + NB - 1]))|0);
            BigInteger.ShiftWordsLeftByBits(TBarr, TBstart, NB, shiftBits);
            TA[0] = (((0) & 65535)|0);
            TA[NA] = (((0) & 65535)|0);
            TA[NA + 1] = (((0) & 65535)|0);
            for (var arrfillI = 0; arrfillI < NAint; arrfillI++) TA[((Tstart + shiftWords)|0) + arrfillI] = Aarr[Astart + arrfillI];
            BigInteger.ShiftWordsLeftByBits(TA, Tstart, NA + 2, shiftBits);
            if (TA[Tstart + NA + 1] == 0 && (((TA[Tstart + NA])|0) & 65535) <= 1) {
                Qarr[Qstart + NA - NB + 1] = (((0) & 65535)|0);
                Qarr[Qstart + NA - NB] = (((0) & 65535)|0);
                while (TA[NA] != 0 || BigInteger.Compare(TA, ((Tstart + NA - NB)|0), TBarr, TBstart, NB) >= 0) {
                    TA[NA] = (((((TA[NA] - ((BigInteger.Subtract(TA, ((Tstart + NA - NB)|0), TA, ((Tstart + NA - NB)|0), TBarr, TBstart, NB))|0)) & 65535))|0));
                    Qarr[Qstart + NA - NB] = (((Qarr[Qstart + NA - NB] + 1) & 65535)|0);
                }
            } else {
                NA += 2;
            }
            var BT = [0, 0];
            BT[0] = (((((TBarr[TBstart + NB - 2] + 1)|0) & 65535)|0));
            BT[1] = ((((((TBarr[TBstart + NB - 1] + ((BT[0] == 0 ? 1 : 0)|0))|0) & 65535))|0));
            for (var i = NA - 2; i >= NB; i -= 2) {
                BigInteger.AtomicDivide(Qarr, ((Qstart + i - NB)|0), TA, ((Tstart + i - 2)|0), BT, 0);
                BigInteger.CorrectQuotientEstimate(TA, ((Tstart + i - NB)|0), TParr, TPstart, Qarr, ((Qstart + (i - NB))|0), TBarr, TBstart, NB);
            }
            if (Rarr != null) {
                for (var arrfillI = 0; arrfillI < NB; arrfillI++) Rarr[Rstart + arrfillI] = TA[((Tstart + shiftWords)|0) + arrfillI];
                BigInteger.ShiftWordsRightByBits(Rarr, Rstart, NB, shiftBits);
            }
        }
    };
    constructor.RoundupSizeTable = [2, 2, 2, 4, 4, 8, 8, 8, 8];
    constructor.RoundupSize = function(n) {
        if (n <= 8) return BigInteger.RoundupSizeTable[n]; else if (n <= 16) return 16; else if (n <= 32) return 32; else if (n <= 64) return 64; else return 1 << ((BigInteger.BitPrecisionInt(n - 1))|0);
    };
    prototype.negative = null;
    prototype.wordCount = -1;
    prototype.reg = null;
    /**
     * Initializes a BigInteger object from an array of bytes.
     * @param bytes A Array<Byte> object.
     * @param littleEndian A Boolean object.
     */
    constructor.fromByteArray = function(bytes, littleEndian) {
        var bigint = new BigInteger();
        bigint.fromByteArrayInternal(bytes, littleEndian);
        return bigint;
    };
    prototype.fromByteArrayInternal = function(bytes, littleEndian) {
        if (bytes == null) throw new RuntimeException("bytes");
        if (bytes.length == 0) {
            this.reg = [0, 0];
            this.wordCount = 0;
        } else {
            this.reg = [];
            for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize((((((bytes.length)|0) + 1) / 2)|0)); arrfillI++) this.reg[arrfillI] = 0;
            var jIndex = (littleEndian) ? bytes.length - 1 : 0;
            var negative = ((bytes[jIndex]) & 128) != 0;
            var j = 0;
            for (var i = 0; i < bytes.length; i += 2, j++) {
                var index = (littleEndian) ? i : bytes.length - 1 - i;
                var index2 = (littleEndian) ? i + 1 : bytes.length - 2 - i;
                this.reg[j] = (((((((((bytes[index])|0) & 255)|0)) & 65535))|0));
                if (index2 >= 0 && index2 < bytes.length) {
                    this.reg[j] = (((((this.reg[j] | (((((bytes[index2])|0) << 8)|0))) & 65535))|0));
                } else if (negative) {
                    
                    this.reg[j] = ((((this.reg[j] | (65280)) & 65535)|0));
                }
            }
            this.negative = negative;
            if (negative) {
                for (; j < this.reg.length; j++) {
                    this.reg[j] = (((65535) & 65535)|0);
                }
                
                BigInteger.TwosComplement(this.reg, 0, ((this.reg.length)|0));
            }
            this.wordCount = this.CalcWordCount();
        }
    };
    prototype.Allocate = function(length) {
        this.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(length); arrfillI++) this.reg[arrfillI] = 0;
        BigInteger.SetWords(this.reg, 1, 0, ((this.reg.length - 1)|0));
        
        this.negative = false;
        this.wordCount = 0;
        return this;
    };
    constructor.GrowForCarry = function(a, carry) {
        var oldLength = a.length;
        var ret = BigInteger.CleanGrow(a, BigInteger.RoundupSize(oldLength + 1));
        ret[oldLength] = (((carry) & 65535)|0);
        return ret;
    };
    constructor.CleanGrow = function(a, size) {
        if (size > a.length) {
            var newa = [];
            for (var arrfillI = 0; arrfillI < size; arrfillI++) newa[arrfillI] = 0;
            for (var arrfillI = 0; arrfillI < a.length; arrfillI++) newa[0 + arrfillI] = a[0 + arrfillI];
            return newa;
        }
        return a;
    };
    prototype.SetBitInternal = function(n, value) {
        if (value) {
            this.reg = BigInteger.CleanGrow(this.reg, BigInteger.RoundupSize(BigInteger.BitsToWords(n + 1)));
            this.reg[((n / 16)|0)] = (((((this.reg[((n / 16)|0)] | ((((1) & 65535) << ((n & 15)|0))|0)) & 65535))|0));
            this.wordCount = this.CalcWordCount();
        } else {
            if (((n / 16)|0) < this.reg.length) this.reg[((n / 16)|0)] = (((((this.reg[((n / 16)|0)] & ((((~((((1) & 65535)|0) << ((n % 16)|0))))|0))) & 65535))|0));
            this.wordCount = this.CalcWordCount();
        }
    };
    /**
     * 
     * @param index A 32-bit unsigned integer.
     */
    prototype.testBit = function(index) {
        if (index < 0) throw new RuntimeException("index");
        if (this.signum() < 0) {
            var tcindex = 0;
            var wordpos = ((index / 16)|0);
            if (wordpos >= this.reg.length) return true;
            while (tcindex < wordpos && this.reg[tcindex] == 0) {
                tcindex++;
            }
            var tc;
            {
                tc = this.reg[wordpos];
                if (tcindex == wordpos) tc--;
                tc = ((~tc)|0);
            }
            return (((tc >> ((index & 15)|0)) & 1) != 0);
        } else {
            return this.GetUnsignedBit(index);
        }
    };
    /**
     * 
     * @param n A 32-bit unsigned integer.
     */
    prototype.GetUnsignedBit = function(n) {
        if ((n) < 0) throw new RuntimeException("n" + " not greater or equal to " + "0" + " (" + Integer.toString(n|0) + ")");
        if (((n / 16)|0) >= this.reg.length) return false; else return (((this.reg[((n / 16)|0)] >> ((n & 15)|0)) & 1) != 0);
    };
    prototype.InitializeInt = function(numberValue) {
        var iut;
        {
            this.negative = (numberValue < 0);
            if (numberValue == -2147483648) {
                this.reg = [0, 0];
                this.reg[0] = (((0) & 65535)|0);
                this.reg[1] = (((32768) & 65535)|0);
                this.wordCount = 2;
            } else {
                iut = ((numberValue < 0) ? ((-numberValue)|0) : (numberValue|0));
                this.reg = [0, 0];
                this.reg[0] = (((iut|0) & 65535)|0);
                this.reg[1] = (((((iut >> 16)|0) & 65535)|0));
                this.wordCount = (this.reg[1] != 0 ? 2 : (this.reg[0] == 0 ? 0 : 1));
            }
        }
        return this;
    };
    /**
     * Returns a byte array of this object's value.
     * @param littleEndian A Boolean object.
     * @return A byte array that represents the value of this object.
     */
    prototype.toByteArray = function(littleEndian) {
        var sign = this.signum();
        if (sign == 0) {
            return [0];
        } else if (sign > 0) {
            var byteCount = this.ByteCount();
            var bc = this.BitLength();
            var byteArrayLength = byteCount;
            if ((bc & 7) == 0 && this.GetUnsignedBit(bc - 1)) {
                byteArrayLength++;
            }
            var bytes = [];
            for (var arrfillI = 0; arrfillI < byteArrayLength; arrfillI++) bytes[arrfillI] = 0;
            var j = 0;
            for (var i = 0; i < byteCount; i += 2, j++) {
                var index = (littleEndian) ? i : bytes.length - 1 - i;
                var index2 = (littleEndian) ? i + 1 : bytes.length - 2 - i;
                bytes[index] = (((this.reg[j]) & 255)|0);
                if (index2 >= 0 && index2 < byteArrayLength) {
                    bytes[index2] = (((this.reg[j] >> 8) & 255)|0);
                }
            }
            return bytes;
        } else {
            var regdata = [];
            for (var arrfillI = 0; arrfillI < this.reg.length; arrfillI++) regdata[arrfillI] = 0;
            for (var arrfillI = 0; arrfillI < this.reg.length; arrfillI++) regdata[0 + arrfillI] = this.reg[0 + arrfillI];
            BigInteger.TwosComplement(regdata, 0, ((regdata.length)|0));
            var byteCount = regdata.length * 2;
            for (var i = regdata.length - 1; i >= 0; i--) {
                if (regdata[i] == (65535)) {
                    byteCount -= 2;
                } else if ((regdata[i] & 65408) == 65408) {
                    
                    byteCount -= 1;
                    break;
                } else if ((regdata[i] & 32768) == 32768) {
                    
                    break;
                } else {
                    
                    byteCount += 1;
                    break;
                }
            }
            if (byteCount == 0) byteCount = 1;
            var bytes = [];
            for (var arrfillI = 0; arrfillI < byteCount; arrfillI++) bytes[arrfillI] = 0;
            bytes[(littleEndian) ? bytes.length - 1 : 0] = 255;
            byteCount = (byteCount < regdata.length * 2 ? byteCount : regdata.length * 2);
            var j = 0;
            for (var i = 0; i < byteCount; i += 2, j++) {
                var index = (littleEndian) ? i : bytes.length - 1 - i;
                var index2 = (littleEndian) ? i + 1 : bytes.length - 2 - i;
                bytes[index] = (((regdata[j]) & 255)|0);
                if (index2 >= 0 && index2 < byteCount) {
                    bytes[index2] = (((regdata[j] >> 8) & 255)|0);
                }
            }
            return bytes;
        }
    };
    /**
     * Shifts this object's value by a number of bits. A value of 1 doubles
     * this value, a value of 2 multiplies it by 4, a value of 3 by 8, a value of
     * 4 by 16, and so on.
     * @param n The number of bits to shift. Can be negative, in which case
     * this is the same as shiftRight with the absolute value of n.
     */
    prototype.shiftLeft = function(n) {
        if (n == 0) return this;
        if (n < 0) {
            if (n == -2147483648) return this.shiftRight(1).shiftRight(2147483647);
            return this.shiftRight(-n);
        }
        var ret = new BigInteger();
        var numWords = ((this.wordCount)|0);
        var shiftWords = ((n >> 4)|0);
        var shiftBits = ((n & 15)|0);
        var neg = numWords > 0 && this.negative;
        ret.negative = this.negative;
        ret.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(numWords + BigInteger.BitsToWords(n|0)); arrfillI++) ret.reg[arrfillI] = 0;
        for (var arrfillI = 0; arrfillI < numWords; arrfillI++) ret.reg[0 + arrfillI] = this.reg[0 + arrfillI];
        if (neg) {
            BigInteger.TwosComplement(ret.reg, 0, ((ret.reg.length)|0));
        }
        BigInteger.ShiftWordsLeftByWords(ret.reg, 0, numWords + shiftWords, shiftWords);
        BigInteger.ShiftWordsLeftByBits(ret.reg, (shiftWords|0), numWords + BigInteger.BitsToWords(shiftBits), shiftBits);
        if (neg) {
            BigInteger.TwosComplement(ret.reg, 0, ((ret.reg.length)|0));
        }
        ret.wordCount = ret.CalcWordCount();
        return ret;
    };
    /**
     * 
     * @param n A 32-bit signed integer.
     */
    prototype.shiftRight = function(n) {
        if (n == 0) return this;
        if (n < 0) {
            if (n == -2147483648) return this.shiftLeft(1).shiftLeft(2147483647);
            return this.shiftLeft(-n);
        }
        var ret = new BigInteger();
        var numWords = ((this.wordCount)|0);
        var shiftWords = ((n >> 4)|0);
        var shiftBits = ((n & 15)|0);
        ret.negative = this.negative;
        ret.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(numWords); arrfillI++) ret.reg[arrfillI] = 0;
        for (var arrfillI = 0; arrfillI < numWords; arrfillI++) ret.reg[0 + arrfillI] = this.reg[0 + arrfillI];
        if (this.signum() < 0) {
            BigInteger.TwosComplement(ret.reg, 0, ((ret.reg.length)|0));
            BigInteger.ShiftWordsRightByWordsSignExtend(ret.reg, 0, numWords, shiftWords);
            if (numWords > shiftWords) BigInteger.ShiftWordsRightByBitsSignExtend(ret.reg, 0, numWords - shiftWords, shiftBits);
            BigInteger.TwosComplement(ret.reg, 0, ((ret.reg.length)|0));
        } else {
            BigInteger.ShiftWordsRightByWords(ret.reg, 0, numWords, shiftWords);
            if (numWords > shiftWords) BigInteger.ShiftWordsRightByBits(ret.reg, 0, numWords - shiftWords, shiftBits);
        }
        ret.wordCount = ret.CalcWordCount();
        return ret;
    };
    /**
     * 
     * @param longerValue A 64-bit signed integer.
     */
    constructor.valueOf = function(longerValue) {
        if (longerValue.signum() == 0) return BigInteger.ZERO;
        if (longerValue.equalsInt(1)) return BigInteger.ONE;
        var ret = new BigInteger();
        {
            ret.negative = (longerValue.signum() < 0);
            ret.reg = [0, 0, 0, 0];
            if (longerValue.equals(JSInteropFactory.LONG_MIN_VALUE())) {
                ret.reg[0] = (((0) & 65535)|0);
                ret.reg[1] = (((0) & 65535)|0);
                ret.reg[2] = (((0) & 65535)|0);
                ret.reg[3] = (((32768) & 65535)|0);
                ret.wordCount = 4;
            } else {
                var ut = longerValue;
                if (ut.signum() < 0) ut = ut.negate();
                ret.reg[0] = (((((ut.andInt(65535).shortValue()) & 65535))|0));
                ut = ut.shiftRight(16);
                ret.reg[1] = (((((ut.andInt(65535).shortValue()) & 65535))|0));
                ut = ut.shiftRight(16);
                ret.reg[2] = (((((ut.andInt(65535).shortValue()) & 65535))|0));
                ut = ut.shiftRight(16);
                ret.reg[3] = (((((ut.andInt(65535).shortValue()) & 65535))|0));
                
                ret.wordCount = 4;
                while (ret.wordCount != 0 && ret.reg[ret.wordCount - 1] == 0) ret.wordCount--;
            }
        }
        return ret;
    };
    /**
     * 
     */
    prototype.intValue = function() {
        var c = ((this.wordCount)|0);
        if (c == 0) return 0;
        if (c > 2) throw new RuntimeException();
        if (c == 2 && (this.reg[1] & 32768) != 0) {
            if ((((this.reg[1] & 32767)|0) | this.reg[0]) == 0 && this.negative) {
                return -2147483648;
            } else {
                throw new RuntimeException();
            }
        } else {
            var ivv = (((this.reg[0])|0) & 65535);
            if (c > 1) ivv |= (((this.reg[1])|0) & 65535) << 16;
            if (this.negative) ivv = -ivv;
            return ivv;
        }
    };
    prototype.HasTinyValue = function() {
        var c = ((this.wordCount)|0);
        if (c > 2) return false;
        if (c == 2 && (this.reg[1] & 32768) != 0) {
            return (this.negative && this.reg[1] == (32768) && this.reg[0] == 0);
        }
        return true;
    };
    prototype.HasSmallValue = function() {
        var c = ((this.wordCount)|0);
        if (c > 4) return false;
        if (c == 4 && (this.reg[3] & 32768) != 0) {
            return (this.negative && this.reg[3] == (32768) && this.reg[2] == 0 && this.reg[1] == 0 && this.reg[0] == 0);
        }
        return true;
    };
    /**
     * 
     */
    prototype.longValue = function() {
        var count = this.wordCount;
        if (count == 0) return JSInteropFactory.createLong(0);
        if (count > 4) throw new RuntimeException();
        if (count == 4 && (this.reg[3] & 32768) != 0) {
            if (this.negative && this.reg[3] == (32768) && this.reg[2] == 0 && this.reg[1] == 0 && this.reg[0] == 0) {
                return JSInteropFactory.LONG_MIN_VALUE();
            } else {
                throw new RuntimeException();
            }
        } else {
            var tmp = ((this.reg[0])|0) & 65535;
            var vv = JSInteropFactory.createLong(tmp);
            if (count > 1) {
                tmp = ((this.reg[1])|0) & 65535;
                vv = vv.or((JSInteropFactory.createLong(tmp)).shiftLeft(16));
            }
            if (count > 2) {
                tmp = ((this.reg[2])|0) & 65535;
                vv = vv.or((JSInteropFactory.createLong(tmp)).shiftLeft(32));
            }
            if (count > 3) {
                tmp = ((this.reg[3])|0) & 65535;
                vv = vv.or((JSInteropFactory.createLong(tmp)).shiftLeft(48));
            }
            if (this.negative) vv = vv.negate();
            return vv;
        }
    };
    constructor.Power2 = function(e) {
        var r = new BigInteger().Allocate(BigInteger.BitsToWords((e + 1)|0));
        r.SetBitInternal((e|0), true);
        
        return r;
    };
    /**
     * 
     * @param power A BigInteger object.
     */
    prototype.PowBigIntVar = function(power) {
        if ((power) == null) throw new RuntimeException("power");
        var sign = power.signum();
        if (sign < 0) throw new RuntimeException("power is negative");
        var thisVar = this;
        if (sign == 0) return BigInteger.ONE; else if (power.equals(BigInteger.ONE)) return this; else if (power.wordCount == 1 && power.reg[0] == 2) return thisVar.multiply(thisVar); else if (power.wordCount == 1 && power.reg[0] == 3) return (thisVar.multiply(thisVar)).multiply(thisVar);
        
        var r = BigInteger.ONE;
        while (power.signum() != 0) {
            if (power.testBit(0)) {
                r = (r.multiply(thisVar));
            }
            power = power.shiftRight(1);
            if (power.signum() != 0) {
                thisVar = (thisVar.multiply(thisVar));
            }
        }
        return r;
    };
    /**
     * 
     * @param powerSmall A 32-bit signed integer.
     */
    prototype.pow = function(powerSmall) {
        if (powerSmall < 0) throw new RuntimeException("power is negative");
        var thisVar = this;
        if (powerSmall == 0) return BigInteger.ONE; else if (powerSmall == 1) return this; else if (powerSmall == 2) return thisVar.multiply(thisVar); else if (powerSmall == 3) return (thisVar.multiply(thisVar)).multiply(thisVar);
        
        var r = BigInteger.ONE;
        while (powerSmall != 0) {
            if ((powerSmall & 1) != 0) {
                r = (r.multiply(thisVar));
            }
            powerSmall >>= 1;
            if (powerSmall != 0) {
                thisVar = (thisVar.multiply(thisVar));
            }
        }
        return r;
    };
    /**
     * 
     */
    prototype.negate = function() {
        var bigintRet = new BigInteger();
        bigintRet.reg = this.reg;
        
        bigintRet.wordCount = this.wordCount;
        bigintRet.negative = (this.wordCount != 0) && (!this.negative);
        return bigintRet;
    };
    /**
     * 
     */
    prototype.abs = function() {
        return this.signum() >= 0 ? this : this.negate();
    };
    constructor.BytePrecision = function(numberValue) {
        if (numberValue == 0) return 0;
        var l = 0, h = 8 * 2;
        while (h - l > 8) {
            var t = (((l + h) / 2)|0);
            if ((numberValue >> t) != 0) l = t; else h = t;
        }
        return (((h / 8)|0)|0);
    };
    /**
     * 
     */
    prototype.CalcWordCount = function() {
        return ((BigInteger.CountWords(this.reg, this.reg.length))|0);
    };
    /**
     * 
     */
    prototype.ByteCount = function() {
        var wc = this.wordCount;
        if (wc > 0) return (((wc - 1) * 2 + BigInteger.BytePrecision(this.reg[wc - 1]))|0); else return 0;
    };
    /**
     * 
     */
    prototype.BitLength = function() {
        var wc = this.wordCount;
        if (wc > 0) return (((wc - 1) * 16 + BigInteger.BitPrecision(this.reg[wc - 1]))|0); else return 0;
    };
    constructor.vec = "0123456789ABCDEF";
    constructor.ReverseChars = function(chars, offset, length) {
        var half = length >> 1;
        var right = offset + length - 1;
        for (var i = 0; i < half; i++, right--) {
            var value = chars[offset + i];
            chars[offset + i] = chars[right];
            chars[right] = value;
        }
    };
    prototype.SmallValueToString = function() {
        var value = this.longValue();
        if (value.equals(JSInteropFactory.LONG_MIN_VALUE())) return "-9223372036854775808";
        var neg = (value.signum() < 0);
        var chars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var count = 0;
        if (neg) {
            chars[0] = '-';
            count++;
            value = value.negate();
        }
        while (value.signum() != 0) {
            var digit = BigInteger.vec.charAt(value.remainderWithUnsignedDivisor(10).intValue());
            chars[count++] = digit;
            value = value.divideWithUnsignedDivisor(10);
        }
        if (neg) BigInteger.ReverseChars(chars, 1, count - 1); else BigInteger.ReverseChars(chars, 0, count);
        var tmpbuilder = JSInteropFactory.createStringBuilder(16);
        for (var arrfillI = 0; arrfillI < count; arrfillI++) tmpbuilder.append(chars[arrfillI]);
        return tmpbuilder.toString();
    };
    /**
     * Converts this object to a text string.
     * @return A string representation of this object.
     */
    prototype.toString = function() {
        if (this.signum() == 0) return "0";
        if (this.HasSmallValue()) {
            return this.SmallValueToString();
        }
        var tempReg = [];
        for (var arrfillI = 0; arrfillI < this.wordCount; arrfillI++) tempReg[arrfillI] = 0;
        for (var arrfillI = 0; arrfillI < tempReg.length; arrfillI++) tempReg[0 + arrfillI] = this.reg[0 + arrfillI];
        var wordCount = tempReg.length;
        while (wordCount != 0 && tempReg[wordCount - 1] == 0) wordCount--;
        var i = 0;
        var s = [];
        for (var arrfillI = 0; arrfillI < (((this.BitLength() / 3)|0) + 1); arrfillI++) s[arrfillI] = 0;
        while (wordCount != 0) {
            if (wordCount == 1 && tempReg[0] > 0 && tempReg[0] < 10000) {
                var rest = tempReg[0];
                while (rest != 0) {
                    s[i++] = BigInteger.vec.charAt(rest % 10);
                    rest = ((rest / 10)|0);
                }
                break;
            } else {
                var remainderSmall = BigInteger.FastDivideAndRemainder(tempReg, wordCount, 10000);
                
                while (wordCount != 0 && tempReg[wordCount - 1] == 0) wordCount--;
                for (var j = 0; j < 4; j++) {
                    s[i++] = BigInteger.vec.charAt((remainderSmall % 10)|0);
                    remainderSmall = ((remainderSmall / 10)|0);
                }
            }
        }
        BigInteger.ReverseChars(s, 0, i);
        if (this.signum() < 0) {
            var sb = JSInteropFactory.createStringBuilder(i + 1);
            sb.append('-');
            for (var arrfillI = 0; arrfillI < (0) + (i); arrfillI++) sb.append(s[arrfillI]);
            return sb.toString();
        } else {
            var tmpbuilder = JSInteropFactory.createStringBuilder(16);
            for (var arrfillI = 0; arrfillI < i; arrfillI++) tmpbuilder.append(s[arrfillI]);
            return tmpbuilder.toString();
        }
    };
    /**
     * 
     * @param str A string object.
     */
    constructor.fromString = function(str) {
        if (str == null || str.length == 0) throw new RuntimeException("str");
        var offset = 0;
        var negative = false;
        if (str.charAt(0) == '-') {
            offset++;
            negative = true;
        }
        var bigint = new BigInteger().Allocate(4);
        var haveDigits = false;
        for (var i = offset; i < str.length; i++) {
            var c = str.charAt(i);
            if (c < '0' || c > '9') throw new RuntimeException("Illegal character found");
            haveDigits = true;
            var digit = ((c - '0')|0);
            
            var carry = BigInteger.LinearMultiply(bigint.reg, 0, bigint.reg, 0, 10, bigint.reg.length);
            if (carry != 0) bigint.reg = BigInteger.GrowForCarry(bigint.reg, carry);
            
            if (digit != 0 && BigInteger.Increment(bigint.reg, 0, bigint.reg.length, (digit|0)) != 0) bigint.reg = BigInteger.GrowForCarry(bigint.reg, 1);
        }
        if (!haveDigits) throw new RuntimeException("No digits");
        bigint.wordCount = bigint.CalcWordCount();
        bigint.negative = (bigint.wordCount != 0 && negative);
        return bigint;
    };
    /**
     * Returns the greatest common divisor of two integers.
     * @param bigintSecond A BigInteger object.
     */
    prototype.gcd = function(bigintSecond) {
        if ((bigintSecond) == null) throw new RuntimeException("bigintSecond");
        if (this.signum() == 0) return (bigintSecond).abs();
        if (bigintSecond.signum() == 0) return (this).abs();
        var thisValue = this.abs();
        bigintSecond = bigintSecond.abs();
        if (bigintSecond.equals(BigInteger.ONE) || thisValue.equals(bigintSecond)) return bigintSecond;
        if (thisValue.equals(BigInteger.ONE)) return thisValue;
        var temp;
        while (thisValue.signum() != 0) {
            if (thisValue.compareTo(bigintSecond) < 0) {
                temp = thisValue;
                thisValue = bigintSecond;
                bigintSecond = temp;
            }
            thisValue = thisValue.remainder(bigintSecond);
        }
        return bigintSecond;
    };
    /**
     * Calculates the remainder when a BigInteger raised to a certain power
     * is divided by another BigInteger.
     * @param pow A BigInteger object.
     * @param mod A BigInteger object.
     */
    prototype.ModPow = function(pow, mod) {
        if ((pow) == null) throw new RuntimeException("pow");
        if (pow.signum() < 0) throw new RuntimeException("pow is negative");
        var r = BigInteger.ONE;
        var v = this;
        while (pow.signum() != 0) {
            if (pow.testBit(0)) {
                r = (r.multiply(v)).remainder(mod);
            }
            pow = pow.shiftRight(1);
            if (pow.signum() != 0) {
                v = (v.multiply(v)).remainder(mod);
            }
        }
        return r;
    };
    constructor.PositiveAdd = function(sum, bigintAddend, bigintAugend) {
        var carry;
        if (bigintAddend.reg.length == bigintAugend.reg.length) carry = BigInteger.Add(sum.reg, 0, bigintAddend.reg, 0, bigintAugend.reg, 0, ((bigintAddend.reg.length)|0)); else if (bigintAddend.reg.length > bigintAugend.reg.length) {
            carry = BigInteger.Add(sum.reg, 0, bigintAddend.reg, 0, bigintAugend.reg, 0, ((bigintAugend.reg.length)|0));
            for (var arrfillI = 0; arrfillI < bigintAddend.reg.length - bigintAugend.reg.length; arrfillI++) sum.reg[bigintAugend.reg.length + arrfillI] = bigintAddend.reg[bigintAugend.reg.length + arrfillI];
            carry = BigInteger.Increment(sum.reg, bigintAugend.reg.length, ((bigintAddend.reg.length - bigintAugend.reg.length)|0), (carry|0));
        } else {
            carry = BigInteger.Add(sum.reg, 0, bigintAddend.reg, 0, bigintAugend.reg, 0, ((bigintAddend.reg.length)|0));
            for (var arrfillI = 0; arrfillI < bigintAugend.reg.length - bigintAddend.reg.length; arrfillI++) sum.reg[bigintAddend.reg.length + arrfillI] = bigintAugend.reg[bigintAddend.reg.length + arrfillI];
            carry = BigInteger.Increment(sum.reg, bigintAddend.reg.length, ((bigintAugend.reg.length - bigintAddend.reg.length)|0), (carry|0));
        }
        if (carry != 0) {
            var len = BigInteger.RoundupSize(((sum.reg.length / 2)|0) + 1);
            sum.reg = BigInteger.CleanGrow(sum.reg, len);
            sum.reg[((sum.reg.length / 2)|0)] = (((1) & 65535)|0);
        }
        sum.negative = false;
        sum.wordCount = sum.CalcWordCount();
        if (sum.reg.length - sum.wordCount > 10) {
            
            var newLength = BigInteger.RoundupSize(sum.wordCount);
            if (newLength < sum.reg.length) {
                var newreg = [];
                for (var arrfillI = 0; arrfillI < newLength; arrfillI++) newreg[arrfillI] = 0;
                for (var arrfillI = 0; arrfillI < sum.wordCount; arrfillI++) newreg[0 + arrfillI] = sum.reg[0 + arrfillI];
                sum.reg = newreg;
            }
        }
    };
    constructor.PositiveSubtract = function(diff, minuend, subtrahend) {
        var aSize = minuend.wordCount;
        aSize += aSize % 2;
        var bSize = subtrahend.wordCount;
        bSize += bSize % 2;
        if (aSize == bSize) {
            if (BigInteger.Compare(minuend.reg, 0, subtrahend.reg, 0, (aSize|0)) >= 0) {
                
                BigInteger.Subtract(diff.reg, 0, minuend.reg, 0, subtrahend.reg, 0, (aSize|0));
                diff.negative = false;
            } else {
                
                
                BigInteger.Subtract(diff.reg, 0, subtrahend.reg, 0, minuend.reg, 0, (aSize|0));
                diff.negative = true;
            }
        } else if (aSize > bSize) {
            
            
            var borrow = ((BigInteger.Subtract(diff.reg, 0, minuend.reg, 0, subtrahend.reg, 0, (bSize|0)))|0);
            for (var arrfillI = 0; arrfillI < aSize - bSize; arrfillI++) diff.reg[bSize + arrfillI] = minuend.reg[bSize + arrfillI];
            borrow = ((BigInteger.Decrement(diff.reg, bSize, ((aSize - bSize)|0), borrow))|0);
            
            diff.negative = false;
        } else {
            
            var borrow = ((BigInteger.Subtract(diff.reg, 0, subtrahend.reg, 0, minuend.reg, 0, (aSize|0)))|0);
            for (var arrfillI = 0; arrfillI < bSize - aSize; arrfillI++) diff.reg[aSize + arrfillI] = subtrahend.reg[aSize + arrfillI];
            borrow = ((BigInteger.Decrement(diff.reg, aSize, ((bSize - aSize)|0), borrow))|0);
            
            diff.negative = true;
        }
        diff.wordCount = diff.CalcWordCount();
        if (diff.wordCount == 0) diff.negative = false;
    };
    /**
     * Determines whether this object and another object are equal.
     * @param obj An arbitrary object.
     * @return True if the objects are equal; false otherwise.
     */
    prototype.equals = function(obj) {
        var other = ((obj.constructor==BigInteger) ? obj : null);
        if (other == null) return false;
        return other.compareTo(this) == 0;
    };
    /**
     * Returns the hash code for this instance.
     * @return A 32-bit hash code.
     */
    prototype.hashCode = function() {
        var hashCodeValue = 0;
        {
            hashCodeValue += 1000000007 * this.signum();
            if (this.reg != null) {
                for (var i = 0; i < this.wordCount; i++) {
                    hashCodeValue += 1000000013 * this.reg[i];
                }
            }
        }
        return hashCodeValue;
    };
    /**
     * Adds this object and another object.
     * @param bigintAugend A BigInteger object.
     * @return The sum of the two objects.
     */
    prototype.add = function(bigintAugend) {
        if ((bigintAugend) == null) throw new RuntimeException("bigintAugend");
        var sum = new BigInteger().Allocate((this.reg.length > bigintAugend.reg.length ? this.reg.length : bigintAugend.reg.length)|0);
        if (this.signum() >= 0) {
            if (bigintAugend.signum() >= 0) BigInteger.PositiveAdd(sum, this, bigintAugend); else BigInteger.PositiveSubtract(sum, this, bigintAugend);
        } else {
            
            
            if (bigintAugend.signum() >= 0) {
                BigInteger.PositiveSubtract(sum, bigintAugend, this);
            } else {
                
                BigInteger.PositiveAdd(sum, this, bigintAugend);
                
                sum.negative = sum.signum() != 0;
            }
        }
        return sum;
    };
    /**
     * Subtracts a BigInteger from this BigInteger.
     * @param subtrahend A BigInteger object.
     * @return The difference of the two objects.
     */
    prototype.subtract = function(subtrahend) {
        if ((subtrahend) == null) throw new RuntimeException("subtrahend");
        var diff = new BigInteger().Allocate((this.reg.length > subtrahend.reg.length ? this.reg.length : subtrahend.reg.length)|0);
        if (this.signum() >= 0) {
            if (subtrahend.signum() >= 0) BigInteger.PositiveSubtract(diff, this, subtrahend); else BigInteger.PositiveAdd(diff, this, subtrahend);
        } else {
            if (subtrahend.signum() >= 0) {
                BigInteger.PositiveAdd(diff, this, subtrahend);
                diff.negative = diff.signum() != 0;
            } else {
                BigInteger.PositiveSubtract(diff, subtrahend, this);
            }
        }
        return diff;
    };
    constructor.PositiveMultiply = function(product, bigintA, bigintB) {
        if (bigintA.wordCount == 1) {
            var wc = bigintB.wordCount;
            product.reg = [];
            for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(wc + 1); arrfillI++) product.reg[arrfillI] = 0;
            product.reg[wc] = ((((BigInteger.LinearMultiply(product.reg, 0, bigintB.reg, 0, bigintA.reg[0], wc)) & 65535)|0));
            product.negative = false;
            product.wordCount = product.CalcWordCount();
            return;
        } else if (bigintB.wordCount == 1) {
            var wc = bigintA.wordCount;
            product.reg = [];
            for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(wc + 1); arrfillI++) product.reg[arrfillI] = 0;
            product.reg[wc] = ((((BigInteger.LinearMultiply(product.reg, 0, bigintA.reg, 0, bigintB.reg[0], wc)) & 65535)|0));
            product.negative = false;
            product.wordCount = product.CalcWordCount();
            return;
        } else if (bigintA.equals(bigintB)) {
            var aSize = BigInteger.RoundupSize(bigintA.wordCount);
            product.reg = [];
            for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(aSize + aSize); arrfillI++) product.reg[arrfillI] = 0;
            product.negative = false;
            var workspace = [];
            for (var arrfillI = 0; arrfillI < aSize + aSize; arrfillI++) workspace[arrfillI] = 0;
            BigInteger.Square(product.reg, 0, workspace, 0, bigintA.reg, 0, aSize);
        } else {
            var aSize = BigInteger.RoundupSize(bigintA.wordCount);
            var bSize = BigInteger.RoundupSize(bigintB.wordCount);
            product.reg = [];
            for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(aSize + bSize); arrfillI++) product.reg[arrfillI] = 0;
            product.negative = false;
            var workspace = [];
            for (var arrfillI = 0; arrfillI < aSize + bSize; arrfillI++) workspace[arrfillI] = 0;
            BigInteger.AsymmetricMultiply(product.reg, 0, workspace, 0, bigintA.reg, 0, aSize, bigintB.reg, 0, bSize);
        }
        product.wordCount = product.CalcWordCount();
    };
    /**
     * Multiplies this instance by the value of a BigInteger object.
     * @param bigintMult A BigInteger object.
     * @return The product of the two objects.
     */
    prototype.multiply = function(bigintMult) {
        if ((bigintMult) == null) throw new RuntimeException("bigintMult");
        var product = new BigInteger();
        if (this.wordCount == 0 || bigintMult.wordCount == 0) return BigInteger.ZERO;
        BigInteger.PositiveMultiply(product, this, bigintMult);
        if ((this.signum() >= 0) != (bigintMult.signum() >= 0)) product.NegateInternal();
        return product;
    };
    constructor.OperandLength = function(a) {
        for (var i = a.length - 1; i >= 0; i--) {
            if (a[i] != 0) return i + 1;
        }
        return 0;
    };
    constructor.DivideWithRemainderAnyLength = function(a, b, quotResult, modResult) {
        var lengthA = BigInteger.OperandLength(a);
        var lengthB = BigInteger.OperandLength(b);
        if (lengthB == 0) throw new RuntimeException("The divisor is zero.");
        
        if (lengthA == 0) {
            
            if (modResult != null) for (var arrfillI = 0; arrfillI < (0) + (modResult.length); arrfillI++) modResult[arrfillI] = 0;
            if (quotResult != null) for (var arrfillI = 0; arrfillI < (0) + (quotResult.length); arrfillI++) quotResult[arrfillI] = 0;
            
            return;
        }
        if (lengthA < lengthB) {
            
            if (modResult != null) {
                var tmpa = [];
                for (var arrfillI = 0; arrfillI < a.length; arrfillI++) tmpa[arrfillI] = 0;
                for (var arrfillI = 0; arrfillI < a.length; arrfillI++) tmpa[0 + arrfillI] = a[0 + arrfillI];
                for (var arrfillI = 0; arrfillI < (0) + (modResult.length); arrfillI++) modResult[arrfillI] = 0;
                for (var arrfillI = 0; arrfillI < (tmpa.length < modResult.length ? tmpa.length : modResult.length); arrfillI++) modResult[0 + arrfillI] = tmpa[0 + arrfillI];
            }
            if (quotResult != null) {
                
                for (var arrfillI = 0; arrfillI < (0) + (quotResult.length); arrfillI++) quotResult[arrfillI] = 0;
            }
            return;
        }
        if (lengthA == 1 && lengthB == 1) {
            var a0 = ((a[0])|0) & 65535;
            var b0 = ((b[0])|0) & 65535;
            var result = (((a0 / b0)|0)|0);
            var mod = (modResult != null) ? ((a0 % b0)|0) : 0;
            if (quotResult != null) {
                for (var arrfillI = 0; arrfillI < (0) + (quotResult.length); arrfillI++) quotResult[arrfillI] = 0;
                quotResult[0] = (((result) & 65535)|0);
            }
            if (modResult != null) {
                for (var arrfillI = 0; arrfillI < (0) + (modResult.length); arrfillI++) modResult[arrfillI] = 0;
                modResult[0] = (((mod) & 65535)|0);
            }
            return;
        }
        lengthA += lengthA % 2;
        if (lengthA > a.length) throw new RuntimeException("no room");
        lengthB += lengthB % 2;
        if (lengthB > b.length) throw new RuntimeException("no room");
        var tempbuf = [];
        for (var arrfillI = 0; arrfillI < lengthA + 3 * (lengthB + 2); arrfillI++) tempbuf[arrfillI] = 0;
        BigInteger.Divide(modResult, 0, quotResult, 0, tempbuf, 0, a, 0, lengthA, b, 0, lengthB);
        
        if (quotResult != null) {
            var quotEnd = lengthA - lengthB + 2;
            for (var arrfillI = quotEnd; arrfillI < (quotEnd) + (quotResult.length - quotEnd); arrfillI++) quotResult[arrfillI] = 0;
        }
    };
    constructor.BitsToWords = function(bitCount) {
        return ((((bitCount + 16 - 1) / (16))|0));
    };
    constructor.FastRemainder = function(dividendReg, count, divisorSmall) {
        var i = count;
        var remainder = 0;
        while ((i--) > 0) {
            remainder = BigInteger.RemainderUnsigned(BigInteger.MakeUint(dividendReg[i], remainder), divisorSmall);
        }
        return remainder;
    };
    constructor.FastDivide = function(quotientReg, count, divisorSmall) {
        var i = count;
        var remainder = 0;
        var idivisor = ((divisorSmall|0) & 65535);
        while ((i--) > 0) {
            var currentDividend = BigInteger.MakeUint(quotientReg[i], remainder);
            if ((currentDividend >> 31) == 0) {
                quotientReg[i] = (((((((currentDividend / idivisor)|0)|0) & 65535))|0));
                if (i > 0) remainder = ((currentDividend % idivisor)|0);
            } else {
                quotientReg[i] = ((((BigInteger.DivideUnsigned(currentDividend, divisorSmall)) & 65535)|0));
                if (i > 0) remainder = BigInteger.RemainderUnsigned(currentDividend, divisorSmall);
            }
        }
    };
    constructor.FastDivideAndRemainder = function(quotientReg, count, divisorSmall) {
        var i = count;
        var remainder = 0;
        var idivisor = ((divisorSmall|0) & 65535);
        while ((i--) > 0) {
            var currentDividend = BigInteger.MakeUint(quotientReg[i], remainder);
            if ((currentDividend >> 31) == 0) {
                quotientReg[i] = (((((((currentDividend / idivisor)|0)|0) & 65535))|0));
                remainder = ((currentDividend % idivisor)|0);
            } else {
                quotientReg[i] = ((((BigInteger.DivideUnsigned(currentDividend, divisorSmall)) & 65535)|0));
                remainder = BigInteger.RemainderUnsigned(currentDividend, divisorSmall);
            }
        }
        return remainder;
    };
    /**
     * Divides this instance by the value of a BigInteger object. The result
     * is rounded down (the fractional part is discarded). Except if the
     * result is 0, it will be negative if this object is positive and the other
     * is negative, or vice versa, and will be positive if both are positive
     * or both are negative.
     * @param bigintDivisor A BigInteger object.
     * @return The quotient of the two objects.
     * @throws RuntimeException The divisor is zero.
     */
    prototype.divide = function(bigintDivisor) {
        if ((bigintDivisor) == null) throw new RuntimeException("bigintDivisor");
        var aSize = this.wordCount;
        var bSize = bigintDivisor.wordCount;
        if (bSize == 0) throw new RuntimeException();
        if (aSize < bSize) {
            
            return BigInteger.ZERO;
        }
        if (aSize <= 4 && bSize <= 4 && this.HasTinyValue() && bigintDivisor.HasTinyValue()) {
            var aSmall = this.intValue();
            var bSmall = bigintDivisor.intValue();
            if (aSmall != -2147483648 || bSmall != -1) {
                var result = ((aSmall / bSmall)|0);
                return new BigInteger().InitializeInt(result);
            }
        }
        var quotient;
        if (bSize == 1) {
            
            quotient = new BigInteger();
            quotient.reg = [];
            for (var arrfillI = 0; arrfillI < this.reg.length; arrfillI++) quotient.reg[arrfillI] = 0;
            quotient.wordCount = this.wordCount;
            quotient.negative = this.negative;
            for (var arrfillI = 0; arrfillI < quotient.reg.length; arrfillI++) quotient.reg[0 + arrfillI] = this.reg[0 + arrfillI];
            BigInteger.FastDivide(quotient.reg, aSize, bigintDivisor.reg[0]);
            quotient.wordCount = quotient.CalcWordCount();
            if (quotient.wordCount != 0) {
                quotient.negative = (this.signum() < 0) ^ (bigintDivisor.signum() < 0);
            } else {
                quotient.negative = false;
            }
            return quotient;
        }
        quotient = new BigInteger();
        aSize += aSize % 2;
        bSize += bSize % 2;
        quotient.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize((aSize - bSize + 2)|0); arrfillI++) quotient.reg[arrfillI] = 0;
        quotient.negative = false;
        BigInteger.DivideWithRemainderAnyLength(this.reg, bigintDivisor.reg, quotient.reg, null);
        quotient.wordCount = quotient.CalcWordCount();
        if ((this.signum() < 0) ^ (bigintDivisor.signum() < 0)) {
            quotient.NegateInternal();
        }
        return quotient;
    };
    /**
     * 
     * @param divisor A BigInteger object.
     */
    prototype.divideAndRemainder = function(divisor) {
        if ((divisor) == null) throw new RuntimeException("divisor");
        var quotient;
        var aSize = this.wordCount;
        var bSize = divisor.wordCount;
        if (bSize == 0) throw new RuntimeException();
        if (aSize < bSize) {
            
            return [BigInteger.ZERO, this];
        }
        if (bSize == 1) {
            
            quotient = new BigInteger();
            quotient.reg = [];
            for (var arrfillI = 0; arrfillI < this.reg.length; arrfillI++) quotient.reg[arrfillI] = 0;
            quotient.wordCount = this.wordCount;
            quotient.negative = this.negative;
            for (var arrfillI = 0; arrfillI < quotient.reg.length; arrfillI++) quotient.reg[0 + arrfillI] = this.reg[0 + arrfillI];
            var smallRemainder = (((BigInteger.FastDivideAndRemainder(quotient.reg, aSize, divisor.reg[0]))|0) & 65535);
            quotient.wordCount = quotient.CalcWordCount();
            if (quotient.wordCount != 0) {
                quotient.negative = (this.signum() < 0) ^ (divisor.signum() < 0);
            } else {
                quotient.negative = false;
            }
            if (this.signum() < 0) smallRemainder = -smallRemainder;
            return [quotient, new BigInteger().InitializeInt(smallRemainder)];
        }
        var remainder = new BigInteger();
        quotient = new BigInteger();
        aSize += aSize % 2;
        bSize += bSize % 2;
        remainder.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(bSize|0); arrfillI++) remainder.reg[arrfillI] = 0;
        remainder.negative = false;
        quotient.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize((aSize - bSize + 2)|0); arrfillI++) quotient.reg[arrfillI] = 0;
        quotient.negative = false;
        BigInteger.DivideWithRemainderAnyLength(this.reg, divisor.reg, quotient.reg, remainder.reg);
        remainder.wordCount = remainder.CalcWordCount();
        quotient.wordCount = quotient.CalcWordCount();
        if (this.signum() < 0) {
            quotient.NegateInternal();
            if (remainder.signum() != 0) {
                remainder.NegateInternal();
            }
        }
        if (divisor.signum() < 0) quotient.NegateInternal();
        return [quotient, remainder];
    };
    /**
     * Finds the remainder that results when this instance is divided by
     * the value of a BigInteger object. The remainder will have the same
     * sign as the dividend.
     * @param divisor A BigInteger object.
     * @return The remainder of the two objects.
     */
    prototype.remainder = function(divisor) {
        if (this.PositiveCompare(divisor) < 0) {
            if (divisor.signum() == 0) throw new RuntimeException();
            return this;
        }
        var remainder = new BigInteger();
        var aSize = this.wordCount;
        var bSize = divisor.wordCount;
        if (bSize == 0) throw new RuntimeException();
        if (aSize < bSize) {
            
            return this;
        }
        if (bSize == 1) {
            var shortRemainder = BigInteger.FastRemainder(this.reg, this.wordCount, divisor.reg[0]);
            var smallRemainder = ((shortRemainder|0) & 65535);
            if (this.signum() < 0) smallRemainder = -smallRemainder;
            return new BigInteger().InitializeInt(smallRemainder);
        }
        aSize += aSize % 2;
        bSize += bSize % 2;
        remainder.reg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize(bSize|0); arrfillI++) remainder.reg[arrfillI] = 0;
        remainder.negative = false;
        var quotientReg = [];
        for (var arrfillI = 0; arrfillI < BigInteger.RoundupSize((aSize - bSize + 2)|0); arrfillI++) quotientReg[arrfillI] = 0;
        BigInteger.DivideWithRemainderAnyLength(this.reg, divisor.reg, quotientReg, remainder.reg);
        remainder.wordCount = remainder.CalcWordCount();
        if (this.signum() < 0 && remainder.signum() != 0) {
            remainder.NegateInternal();
        }
        return remainder;
    };
    prototype.NegateInternal = function() {
        if (this.wordCount != 0) this.negative = (this.signum() > 0);
    };
    prototype.PositiveCompare = function(t) {
        var size = this.wordCount, tSize = t.wordCount;
        if (size == tSize) return BigInteger.Compare(this.reg, 0, t.reg, 0, (size|0)); else return size > tSize ? 1 : -1;
    };
    /**
     * Compares a BigInteger object with this instance.
     * @param other A BigInteger object.
     * @return Zero if the values are equal; a negative number is this instance
     * is less, or a positive number if this instance is greater.
     */
    prototype.compareTo = function(other) {
        if (other == null) return 1;
        var size = this.wordCount, tSize = other.wordCount;
        var sa = (size == 0 ? 0 : (this.negative ? -1 : 1));
        var sb = (tSize == 0 ? 0 : (other.negative ? -1 : 1));
        if (sa != sb) return (sa < sb) ? -1 : 1;
        if (sa == 0) return 0;
        var cmp = 0;
        if (size == tSize) cmp = BigInteger.Compare(this.reg, 0, other.reg, 0, (size|0)); else cmp = size > tSize ? 1 : -1;
        return (sa > 0) ? cmp : -cmp;
    };
    /**
     * 
     */
    prototype.signum = function() {
        if (this.wordCount == 0) return 0;
        return (this.negative) ? -1 : 1;
    };
    /**
     * 
     */
    prototype.isZero = function() {
        return (this.wordCount == 0);
    };
    /**
     * 
     * @param bi A BigInteger object.
     */
    prototype.Sqrt = function(bi) {
        if (this.signum() < 0) return BigInteger.ZERO;
        var bigintX = null;
        var bigintY = BigInteger.Power2((((this.BitLength() + 1) / 2)|0));
        do {
            bigintX = bigintY;
            bigintY = bi.divide(bigintX);
            bigintY = bigintY.add(bigintX);
            bigintY = bigintY.shiftRight(1);
        } while (bigintY.compareTo(bigintX) < 0);
        return bigintX;
    };
    /**
     * Gets whether this value is even.
     */
    prototype.isEven = function() {
        return !this.GetUnsignedBit(0);
    };
    constructor.ZERO = new BigInteger().InitializeInt(0);
    constructor.ONE = new BigInteger().InitializeInt(1);
    constructor.TEN = new BigInteger().InitializeInt(10);
})(BigInteger,BigInteger.prototype);


if(typeof exports!=="undefined")exports.BigInteger=BigInteger;